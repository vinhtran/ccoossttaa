<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Image', 'doctrine');

/**
 * BaseImage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property bigint $image_id
 * @property string $image_name
 * @property bigint $image_location
 * @property string $image_description
 * @property bigint $image_like
 * @property bigint $image_comment
 * @property timestamp $image_uploaded
 * @property bigint $image_fbuser_id
 * @property Fbusers $Fbusers
 * @property Location $Location
 * @property Doctrine_Collection $Comment_Image
 * 
 * @method bigint              getImageId()           Returns the current record's "image_id" value
 * @method string              getImageName()         Returns the current record's "image_name" value
 * @method bigint              getImageLocation()     Returns the current record's "image_location" value
 * @method string              getImageDescription()  Returns the current record's "image_description" value
 * @method bigint              getImageLike()         Returns the current record's "image_like" value
 * @method bigint              getImageComment()      Returns the current record's "image_comment" value
 * @method timestamp           getImageUploaded()     Returns the current record's "image_uploaded" value
 * @method bigint              getImageFbuserId()     Returns the current record's "image_fbuser_id" value
 * @method Fbusers             getFbusers()           Returns the current record's "Fbusers" value
 * @method Location            getLocation()          Returns the current record's "Location" value
 * @method Doctrine_Collection getCommentImage()      Returns the current record's "Comment_Image" collection
 * @method Image               setImageId()           Sets the current record's "image_id" value
 * @method Image               setImageName()         Sets the current record's "image_name" value
 * @method Image               setImageLocation()     Sets the current record's "image_location" value
 * @method Image               setImageDescription()  Sets the current record's "image_description" value
 * @method Image               setImageLike()         Sets the current record's "image_like" value
 * @method Image               setImageComment()      Sets the current record's "image_comment" value
 * @method Image               setImageUploaded()     Sets the current record's "image_uploaded" value
 * @method Image               setImageFbuserId()     Sets the current record's "image_fbuser_id" value
 * @method Image               setFbusers()           Sets the current record's "Fbusers" value
 * @method Image               setLocation()          Sets the current record's "Location" value
 * @method Image               setCommentImage()      Sets the current record's "Comment_Image" collection
 * 
 * @package    nokia.lumia.v2
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseImage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('co_image');
        $this->hasColumn('image_id', 'bigint', 20, array(
             'type' => 'bigint',
             'primary' => true,
             'autoincrement' => true,
             'length' => 20,
             ));
        $this->hasColumn('image_name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('image_location', 'bigint', 20, array(
             'type' => 'bigint',
             'primary' => true,
             'length' => 20,
             ));
        $this->hasColumn('image_description', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('image_like', 'bigint', 20, array(
             'type' => 'bigint',
             'length' => 20,
             ));
        $this->hasColumn('image_comment', 'bigint', 20, array(
             'type' => 'bigint',
             'length' => 20,
             ));
        $this->hasColumn('image_uploaded', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => 25,
             ));
        $this->hasColumn('image_fbuser_id', 'bigint', 20, array(
             'type' => 'bigint',
             'notnull' => true,
             'length' => 20,
             ));


        $this->index('image_id_image_fbuser_id', array(
             'fields' => 
             array(
              0 => 'image_id',
              1 => 'image_fbuser_id',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Fbusers', array(
             'local' => 'image_fbuser_id',
             'foreign' => 'user_id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Location', array(
             'local' => 'image_location',
             'foreign' => 'location_id'));

        $this->hasMany('Comment as Comment_Image', array(
             'local' => 'image_id',
             'foreign' => 'comment_image'));
    }
}