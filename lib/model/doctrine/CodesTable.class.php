<?php

/**
 * CodesTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CodesTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object CodesTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('Codes');
  }

  public static function checkCode( $code, $submitDate)
  {
    $q = Doctrine_Query::create()->select('c.fbuser_id')
      ->from('Codes c')
      ->where('c.string_code = ?', $code)
      ->andWhere('c.finished = ?', 1)
      ->andWhere('c.finished_date <= ?', $submitDate)
      ->andWhere('DATE(c.finished_date) = DATE(?)', $submitDate)
      ->limit(1)
      ;
    return $q->fetchOne();
  }
  
  /**
   * Get top players
   * 
   * @author thang.pham
   * @param integer $limit
   * @return mixed
   */
  public static function getTopPlayers($limit = 5)
  {
    /*
    $con = Doctrine_Manager::connection();
    $q = 'SELECT c.fbuser_id id, c.number_of_second number_of_second, c.finished_date finished_date, c.created_date created_date, f.fbuser_first_name first_name, f.fbuser_last_name last_name '.
        'FROM nf_codes c INNER JOIN nf_fbusers f ON c.fbuser_id = f.fbuser_id '.
        'WHERE (c.fbuser_id, c.finished_date) IN '.
          '(SELECT n.fbuser_id, MAX(n.finished_date) '.
          	'FROM nf_codes n '.
          	'WHERE n.number_of_second > 0 AND n.finished = 1 '.
          	'GROUP BY n.fbuser_id) '.
          'AND c.fbuser_id NOT IN '.
          '(SELECT w.fbuser_id '.
            'FROM nf_winners w) '.
        'ORDER BY c.number_of_second ASC, c.finished_date ASC, c.created_date ASC '.
        'LIMIT '.$limit.';';
    
    $stmt = $con->execute($q);
    $stmt->execute();
    $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
//     var_dump($result);die;
 		*/
    $q = self::getInstance()->createQuery('c')
      ->select('c.fbuser_id, MIN(c.number_of_second) number_of_second, c.finished_date finished_date, f.created_date created_date, f.fbuser_first_name first_name, f.fbuser_last_name last_name')
      ->innerJoin('c.Fbusers f')
      ->where('c.number_of_second > ?', '0')
      ->andWhere('c.finished = ?', 1)
      ->groupBy('c.fbuser_id')
      ->orderBy('MIN(c.number_of_second) ASC, c.finished_date ASC, f.created_date ASC')
      ->limit($limit);
    $result = $q->fetchArray();
    
    return $result;
  }
  
  /**
   * Get recent user score
   * 
   * @author thang.pham
   * @param unknown_type $fbuserId
   * @return mixed
   */
  public static function getUserScore($fbuserId)
  {
  	$q = self::getInstance()->createQuery('c')
    	->select('c.number_of_second')
    	->where('c.fbuser_id = ?', $fbuserId)
    	->andWhere('c.finished = ?', 1)
    	->andWhere('c.number_of_second > ?', '0')
    	->orderBy('c.finished_date DESC')
    	->limit(1);
  	
  	$result = $q->fetchOne();
  	if ($result)
  	{
  	  return $result->getNumberOfSecond();
  	}
  	
  	return false;
  }
  
  /**
   * check if user is already played
   * 
   * @author thang.pham
   * @param string $fbuserId
   * @param date $createdDate
   * @return boolean
   */
  public static function isPlayed($fbuserId, $createdDate)
  {
    $q = self::getInstance()->createQuery('c')
      ->select('COUNT(c.fbuser_id) AS is_played')
      ->where('c.fbuser_id = ?', $fbuserId)
      ->andWhere('DATE(c.created_date) = ?', $createdDate)
      ->andWhere('(c.played_date IS NOT NULL OR DATE(c.played_date) = ?)', $createdDate)
      ->limit(1);
    
    $result = $q->fetchOne();
    
    return !empty($result) && $result->getIsPlayed() ? true : false;
  }
  
  /**
   * get current code record of user
   * 
   * @author thang.pham
   * @param string $fbuserId
   * @param date $createdDate
   * @return mixed
   */
  public static function getCodeRecord($fbuserId, $createdDate)
  {
    $q = self::getInstance()->createQuery('c')
      ->select('*')
      ->where('c.fbuser_id = ?', $fbuserId)
      ->andWhere('DATE(c.created_date) = ?', $createdDate)
      ->limit(1);
    
    $result = $q->fetchOne();
    
    return $result;
  }
  
  /**
   * Check if the string code is created for specify user
   * 
	 * @author thang.pham
   * @param string $fbuserId
   * @param datetime $createdDate
   * 
   * @return mixed
   */
  public static function checkIfCodeCreated($fbuserId, $createdDate)
  {
    $q = self::getInstance()->createQuery('c')
      ->select('c.string_code string_code, c.user_folder user_folder')
      ->where('c.fbuser_id = ?', $fbuserId)
      ->andWhere('DATE(c.created_date) = ?', $createdDate)
      ->limit(1);
      
    $result = $q->fetchOne();
    return $result;    
  }
}